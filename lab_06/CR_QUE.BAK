#include <stdio.h>
#include <stdlib.h>
#include <conio.h>


struct queue
{
    int size;
    int f;
    int r;
    int *arr;
};

int isFull(struct queue *q)
{
    if ((q->r + 1) % q->size == q->f)
    {
	return 1;
    }
    return 0;
}

int isEmpty(struct queue *q)
{
    if (q->f == q->r)  {
	return 1;
    }
    return 0;
}

int dequeue(struct queue *q)
{
    int a;
    if (isEmpty(q))
    {
	printf("Cannot dequeue because the queue is empty\n");
	return -1;
    }
    else
    {
	q->f = (q->f + 1) % q->size;
	a = q->arr[q->f];
	return a;
    }
}

void enqueue(struct queue *q, int val)
{
    if (isFull(q))
    {
	printf("Cannot enqueue because the queue is full\n");
    }
    else
    {
	q->r = (q->r + 1) % q->size;
	q->arr[q->r] = val;
    }
}

void printqueue(struct queue *q)
{
     int i;
    if (isEmpty(q))
    {
	printf("Queue is empty.\n");
    }
    else
    {
	printf("Queue is: ");
	i = (q->f + 1) % q->size;
	while (i != (q->r + 1) % q->size)
	{
	    printf("%d - %d\t", i, q->arr[i]);
	    i = (i + 1) % q->size;
	}

	printf("\n");
    }
}

int main()
{
    int opt, val, result;
    struct queue *q = (struct queue *)malloc(sizeof(struct queue));
    q->size = 5;
    q->f = q->r = 0;
    q->arr = (int *)malloc(q->size * sizeof(int));

    while (1)
    {
	printf("\nChoose an option:\n");
	printf("1- Print queue\n");
	printf("2- Enqueue\n");
	printf("3- Dequeue\n");
	printf("4- Check if full\n");
	printf("5- Check if empty\n");
	printf("6- Exit\n");
	printf("Enter option: ");
	scanf("%d", &opt);

	switch (opt)
	{
	case 1:
	    printqueue(q);
	    break;
	case 2:
	    printf("Enter element to enqueue: ");
	    scanf("%d", &val);
	    enqueue(q, val);
	    break;
	case 3:
	    result = dequeue(q);
	    if (result != -1)
	    {
		printf("Successfully deleted: %d\n", result);
	    }
	    break;
	case 4:
	    printf(isFull(q) ? "Queue is full.\n" : "Queue is not full.\n");
	    break;
	case 5:
	    printf(isEmpty(q) ? "Queue is empty.\n" : "Queue is not empty.\n");
	    break;
	case 6:
	    free(q->arr);
	    free(q);
	    printf("Exiting program.\n");
	    exit(0);
	}
    }
    return 0;
}
